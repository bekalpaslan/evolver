plugins {
    id 'java'
    id 'application'
}

group = 'com.evolver'
version = '1.0.0'

// Use toolchain instead of deprecated sourceCompatibility
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Testing - Explicit JUnit Platform dependency for Gradle 9.0
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'

    // Logging
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'ch.qos.logback:logback-classic:1.4.11'

    // JSON serialization
    implementation 'com.google.code.gson:gson:2.10.1'
}

testing {
    suites {
        test {
            useJUnitJupiter()
        }
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClass = 'com.evolver.agent.AgentBootstrap'
}

// ============ AUTONOMOUS AGENT TASKS ============

tasks.register('bootstrap', JavaExec) {
    group = 'agent'
    description = 'Bootstrap - Agent learns framework automatically'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.AgentBootstrap'
}

tasks.register('inject', JavaExec) {
    group = 'injection'
    description = 'Inject framework into current project'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.injection.InjectionRunner'
}

tasks.register('cli', JavaExec) {
    group = 'agent'
    description = 'Evolver CLI for privacy controls and configuration'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.cli.EvolverCLI'
    if (project.hasProperty('args')) {
        args project.property('args').split(' ')
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Experience Database Management Tasks
task dbMigrate(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceDbManager'
    args = ['migrate']
    description = 'Run experience database migration to latest version'
    group = 'database'
}

task dbConsolidate(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceDbManager'
    args = ['consolidate']
    description = 'Consolidate legacy experience formats into centralized database'
    group = 'database'
}

task dbValidate(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceDbManager'
    args = ['validate']
    description = 'Validate experience database schema and integrity'
    group = 'database'
}

task dbStats(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceDbManager'
    args = ['stats']
    description = 'Show experience database statistics'
    group = 'database'
}

task dbVersion(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceDbManager'
    args = ['version']
    description = 'Show experience database version information'
    group = 'database'
}

task memoryAnalyze(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceMemoryAnalyzer'
    description = 'Analyze memory usage of experience database loading'
    group = 'database'
}

// Experience Database Quality Tasks
task cleanExperiences(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceQualityManager'
    args = ['clean']
    description = 'Remove test data, duplicates, and low-quality experiences'
    group = 'database'
}

task validateExperiences(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceQualityManager'
    args = ['validate']
    description = 'Validate experience quality standards and report issues'
    group = 'database'
}

task purgeTestData(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceQualityManager'
    args = ['purge-test']
    description = 'Remove all experiences with test categories and placeholder names'
    group = 'database'
}

task experienceReport(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.ExperienceQualityManager'
    args = ['report']
    description = 'Generate comprehensive experience database quality report'
    group = 'database'
}

task enforceQuality(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.StrictQualityEnforcer'
    description = 'Enforce strict quality standards and validate all experiences'
    group = 'database'
}

task agentAccountability(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.evolver.agent.AgentAccountabilityReport'
    description = 'Generate agent accountability and contribution quality report'
    group = 'database'
}

task testDirtyDataPrevention(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    mainClass = 'com.evolver.test.TestDirtyDataPrevention'
    description = 'Test dirty data prevention system'
    group = 'verification'
}
