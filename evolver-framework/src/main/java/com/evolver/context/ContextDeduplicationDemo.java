package com.evolver.context;

import com.evolver.agent.AgentCharacteristic;
import java.time.LocalDateTime;
import java.util.*;

/**
 * CONTEXT DEDUPLICATION DEMONSTRATION
 * 
 * Shows how the deduplication engine eliminates redundant context
 * while preserving essential information for different scenarios.
 */
public class ContextDeduplicationDemo {
    
    public static void main(String[] args) {
        System.out.println("🧹 CONTEXT DEDUPLICATION ENGINE DEMONSTRATION");
        System.out.println("═══════════════════════════════════════════════");
        
        demoBasicDeduplication();
        demoSemanticDeduplication();
        demoFrameworkOverheadOptimization();
        demoProgressiveDisclosure();
        demoAgentSpecificOptimization();
    }
    
    /**
     * Demonstrate basic exact duplicate removal
     */
    private static void demoBasicDeduplication() {
        System.out.println("\n📋 BASIC DEDUPLICATION - Exact Duplicates");
        System.out.println("─────────────────────────────────────────────");
        
        ContextDeduplicationEngine engine = new ContextDeduplicationEngine();
        
        // Create test fragments with exact duplicates
        List<ContextFragment> fragments = Arrays.asList(
            createFragment("FRAMEWORK_RULE", "All technology ratings must use 0.1 precision", "framework"),
            createFragment("AGENT_MEMORY", "DocBot prefers documentation-focused context", "agent"),
            createFragment("FRAMEWORK_RULE", "All technology ratings must use 0.1 precision", "framework"), // Exact duplicate
            createFragment("TECH_EXPERIENCE", "Spring Boot rated 8.7/10 for web development", "technology"),
            createFragment("AGENT_MEMORY", "DocBot prefers documentation-focused context", "agent") // Exact duplicate
        );
        
        ContextDeduplicationRequest request = ContextDeduplicationRequest.builder()
            .sessionId("demo-session-1")
            .agentId("DocBot")
            .fragments(fragments)
            .taskType("web_development")
            .build();
        
        ContextDeduplicationResult result = engine.deduplicateContext(request);
        
        System.out.println(result.getFormattedReport());
        System.out.println("💡 INSIGHT: Exact duplicates eliminated, saved " + 
                         result.getTokensSaved() + " tokens (" + 
                         String.format("%.1f%%", result.getTokenReduction() * 100) + " reduction)");
    }\n    \n    /**\n     * Demonstrate semantic similarity detection\n     */\n    private static void demoSemanticDeduplication() {\n        System.out.println(\"\\n🔍 SEMANTIC DEDUPLICATION - Similar Content\");\n        System.out.println(\"─────────────────────────────────────────────\");\n        \n        ContextDeduplicationEngine engine = new ContextDeduplicationEngine();\n        \n        // Create test fragments with semantic similarity\n        List<ContextFragment> fragments = Arrays.asList(\n            createFragment(\"TECH_EXPERIENCE\", \"Spring Boot provides excellent web development capabilities with rating 8.7/10\", \"technology\"),\n            createFragment(\"TECH_EXPERIENCE\", \"Spring Boot offers great web development features, rated 8.7 out of 10\", \"technology\"), // Semantically similar\n            createFragment(\"ARCHITECTURE\", \"Microservices architecture using Spring Boot for scalable applications\", \"architecture\"),\n            createFragment(\"ARCHITECTURE\", \"Spring Boot microservices for building scalable distributed systems\", \"architecture\"), // Semantically similar\n            createFragment(\"DOCUMENTATION\", \"API documentation standards for REST endpoints\", \"docs\")\n        );\n        \n        ContextDeduplicationRequest request = ContextDeduplicationRequest.builder()\n            .sessionId(\"demo-session-2\")\n            .agentId(\"DocBot\")\n            .fragments(fragments)\n            .taskType(\"microservices_development\")\n            .build();\n        \n        ContextDeduplicationResult result = engine.deduplicateContext(request);\n        \n        System.out.println(result.getFormattedReport());\n        System.out.println(\"💡 INSIGHT: Semantic duplicates detected and removed, preserving unique information\");\n    }\n    \n    /**\n     * Demonstrate framework overhead optimization\n     */\n    private static void demoFrameworkOverheadOptimization() {\n        System.out.println(\"\\n⚙️ FRAMEWORK OVERHEAD OPTIMIZATION\");\n        System.out.println(\"─────────────────────────────────────────────\");\n        \n        ContextDeduplicationEngine engine = new ContextDeduplicationEngine();\n        \n        // First request - establish baseline\n        List<ContextFragment> firstRequest = Arrays.asList(\n            createFragment(\"FRAMEWORK_RULE\", \"Technology rating precision: 0.1 (8.7/10 not 8/10)\", \"framework\"),\n            createFragment(\"FRAMEWORK_RULE\", \"Record technology combinations with harmony ratings\", \"framework\"),\n            createFragment(\"AGENT_MEMORY\", \"Maintain privacy: anonymous data only\", \"framework\"),\n            createFragment(\"RATING_SYSTEM\", \"Rating validation ensures consistency\", \"framework\"),\n            createFragment(\"CODE_EXAMPLE\", \"Example implementation of REST controller\", \"implementation\")\n        );\n        \n        ContextDeduplicationRequest request1 = ContextDeduplicationRequest.builder()\n            .sessionId(\"persistent-session\")\n            .agentId(\"CleanFreak\")\n            .fragments(firstRequest)\n            .taskType(\"api_development\")\n            .build();\n        \n        ContextDeduplicationResult result1 = engine.deduplicateContext(request1);\n        System.out.println(\"FIRST REQUEST (establishes baseline):\");\n        System.out.println(result1.getFormattedReport());\n        \n        // Second request - should eliminate framework repetition\n        List<ContextFragment> secondRequest = Arrays.asList(\n            createFragment(\"FRAMEWORK_RULE\", \"Technology rating precision: 0.1 (8.7/10 not 8/10)\", \"framework\"), // Repeat\n            createFragment(\"FRAMEWORK_RULE\", \"Record technology combinations with harmony ratings\", \"framework\"), // Repeat\n            createFragment(\"AGENT_MEMORY\", \"Maintain privacy: anonymous data only\", \"framework\"), // Repeat\n            createFragment(\"CODE_EXAMPLE\", \"Example implementation of database layer\", \"implementation\"), // New\n            createFragment(\"BEST_PRACTICE\", \"Code quality standards for production\", \"quality\") // New\n        );\n        \n        ContextDeduplicationRequest request2 = ContextDeduplicationRequest.builder()\n            .sessionId(\"persistent-session\") // Same session\n            .agentId(\"CleanFreak\")\n            .fragments(secondRequest)\n            .taskType(\"api_development\")\n            .build();\n        \n        ContextDeduplicationResult result2 = engine.deduplicateContext(request2);\n        System.out.println(\"\\nSECOND REQUEST (framework overhead eliminated):\");\n        System.out.println(result2.getFormattedReport());\n        System.out.println(\"💡 INSIGHT: Framework rules established in session, only new content included\");\n    }\n    \n    /**\n     * Demonstrate progressive disclosure optimization\n     */\n    private static void demoProgressiveDisclosure() {\n        System.out.println(\"\\n📚 PROGRESSIVE DISCLOSURE OPTIMIZATION\");\n        System.out.println(\"─────────────────────────────────────────────\");\n        \n        ContextDeduplicationEngine engine = new ContextDeduplicationEngine();\n        \n        // Request with complex/advanced content before basics\n        List<ContextFragment> fragments = Arrays.asList(\n            createAdvancedFragment(\"OPTIMIZATION\", \"Advanced JVM tuning for microservices performance\", 9), // Complex\n            createBasicFragment(\"BASICS\", \"Introduction to Spring Boot framework\", 3), // Basic\n            createAdvancedFragment(\"EDGE_CASE\", \"Handling distributed transaction failures\", 8), // Complex\n            createBasicFragment(\"SETUP\", \"Basic project structure setup\", 2), // Basic\n            createAdvancedFragment(\"PERFORMANCE\", \"Memory optimization strategies\", 9) // Complex\n        );\n        \n        ContextDeduplicationRequest request = ContextDeduplicationRequest.builder()\n            .sessionId(\"learning-session\")\n            .agentId(\"SpeedDemon\")\n            .fragments(fragments)\n            .taskType(\"performance_optimization\")\n            .build();\n        \n        ContextDeduplicationResult result = engine.deduplicateContext(request);\n        \n        System.out.println(result.getFormattedReport());\n        System.out.println(\"💡 INSIGHT: Advanced content deferred until basic foundation is established\");\n    }\n    \n    /**\n     * Demonstrate agent-specific optimization\n     */\n    private static void demoAgentSpecificOptimization() {\n        System.out.println(\"\\n🤖 AGENT-SPECIFIC OPTIMIZATION\");\n        System.out.println(\"─────────────────────────────────────────────\");\n        \n        ContextDeduplicationEngine engine = new ContextDeduplicationEngine();\n        \n        // Same content for different agent types\n        List<ContextFragment> fragments = Arrays.asList(\n            createFragment(\"AGENT_CHARACTERISTIC\", \"DocBot: Documentation-focused, 40% preference\", \"agent\"),\n            createFragment(\"TECH_EXPERIENCE\", \"Spring Boot documentation quality: 8.9/10\", \"technology\"),\n            createFragment(\"CODE_EXAMPLE\", \"REST API implementation example\", \"implementation\"),\n            createFragment(\"DOCUMENTATION\", \"API documentation best practices\", \"docs\"),\n            createFragment(\"PERFORMANCE\", \"Response time optimization techniques\", \"performance\")\n        );\n        \n        // DocBot request (should prefer documentation)\n        ContextDeduplicationRequest docBotRequest = ContextDeduplicationRequest.builder()\n            .sessionId(\"docbot-session\")\n            .agentId(\"DocBot\")\n            .fragments(fragments)\n            .taskType(\"api_documentation\")\n            .build();\n        \n        ContextDeduplicationResult docBotResult = engine.deduplicateContext(docBotRequest);\n        System.out.println(\"DOCBOT OPTIMIZATION:\");\n        System.out.println(docBotResult.getFormattedReport());\n        \n        // SpeedDemon request (should prefer performance)\n        ContextDeduplicationRequest speedDemonRequest = ContextDeduplicationRequest.builder()\n            .sessionId(\"speeddemon-session\")\n            .agentId(\"SpeedDemon\")\n            .fragments(fragments)\n            .taskType(\"performance_optimization\")\n            .build();\n        \n        ContextDeduplicationResult speedDemonResult = engine.deduplicateContext(speedDemonRequest);\n        System.out.println(\"\\nSPEEDDEMON OPTIMIZATION:\");\n        System.out.println(speedDemonResult.getFormattedReport());\n        \n        System.out.println(\"💡 INSIGHT: Same content optimized differently based on agent characteristics\");\n    }\n    \n    // Helper methods to create test fragments\n    \n    private static ContextFragment createFragment(String type, String content, String aspect) {\n        return ContextFragment.builder()\n            .id(UUID.randomUUID().toString())\n            .type(ContextType.valueOf(type))\n            .content(content)\n            .addAspect(aspect)\n            .relevanceScore(0.8)\n            .estimatedTokens(content.length() / 4) // Rough token estimate\n            .timestamp(LocalDateTime.now())\n            .build();\n    }\n    \n    private static ContextFragment createAdvancedFragment(String type, String content, int complexity) {\n        return ContextFragment.builder()\n            .id(UUID.randomUUID().toString())\n            .type(ContextType.valueOf(type))\n            .content(content)\n            .addAspect(\"advanced\")\n            .addAspect(\"complex\")\n            .relevanceScore(0.7)\n            .complexityLevel(complexity)\n            .estimatedTokens(content.length() / 4)\n            .timestamp(LocalDateTime.now())\n            .build();\n    }\n    \n    private static ContextFragment createBasicFragment(String type, String content, int complexity) {\n        return ContextFragment.builder()\n            .id(UUID.randomUUID().toString())\n            .type(ContextType.valueOf(type))\n            .content(content)\n            .addAspect(\"basic\")\n            .addAspect(\"fundamental\")\n            .relevanceScore(0.9)\n            .complexityLevel(complexity)\n            .estimatedTokens(content.length() / 4)\n            .timestamp(LocalDateTime.now())\n            .build();\n    }\n}\n\n/**\n * Enum for context types (simplified for demo)\n */\nenum ContextType {\n    FRAMEWORK_RULE,\n    AGENT_MEMORY,\n    TECH_EXPERIENCE,\n    ARCHITECTURE,\n    DOCUMENTATION,\n    CODE_EXAMPLE,\n    RATING_SYSTEM,\n    BEST_PRACTICE,\n    OPTIMIZATION,\n    BASICS,\n    EDGE_CASE,\n    SETUP,\n    PERFORMANCE,\n    AGENT_CHARACTERISTIC\n}